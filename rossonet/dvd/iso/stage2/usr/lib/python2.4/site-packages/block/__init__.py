#!/usr/bin/python

import dm

from maps import *
from device import MultiPath, RaidDev, RaidSet, BlockDev, DeviceMaps, \
                   removeDeviceMap

_probesLoaded = False

_log_ignore = False
_verbose = dm.log_warn

def dm_log(level, file, line, message):
    if _log_ignore:
        return;
    if level == dm.log_fatal or level == dm.log_err:
        raise Exception, message
        #print "%s" % (message,)
        pass
    elif level == dm.log_warn:
        raise RuntimeWarning, message
        #print "%s" % (message,)
        pass
    elif level <= _verbose:
        print "%s" % (message,)
        pass

dm.set_logger(dm_log)
del dm_log

import dmraid
from bdevid import bdevid as _bdevid
_bd = _bdevid()

def setBdevidPath(path):
    _bd.path = path

def getBdevidPath():
    return _bd.path

def load(name):
    _bd.load(name)
    global _probesLoaded
    _probesLoaded = True
    

def getDevice(name):
    name = name.split('/')[-1]
    maps = dm.maps()
    for map in maps:
        if name == map.name:
            return (map.dev.major, map.dev.minor)

def getMPaths(disks, logger=None):
    old = disks
    disks = []
    for disk in old:
        if isinstance(disk, [].__class__) or isinstance(disk,().__class__):
            disks += list(disk)
        else:
            disks.append(disk)

    global _probesLoaded
    if not _probesLoaded:
        _bd.loadAll()
        _probesLoaded = True
    prefix = "/dev/mapper/"

    newdisks = []
    import os as _os
    for x in range(len(disks)):
        if not disks[x].startswith('/'):
            devdisk = '/dev/' + disks[x]
            tmpdisk = '/tmp/' + disks[x]

            if _os.access(devdisk, _os.F_OK):
                disks[x] = devdisk
            elif _os.access(tmpdisk, _os.F_OK):
                disks[x] = tmpdisk
    del _os
    disks = disks + newdisks

    uuids = {}
    for disk in disks:
        try:
            results = _bd.probe(disk)
        except:
            continue

        for result in results:
            key = [result['vendor'], result['model'], result['unique_id']]
            if logger:
                logger("key for disk %s is [%s,%s,%s]" % (disk, \
                    result['vendor'], result['model'], result['unique_id']))
            if None in key:
                continue;
            uuids.setdefault(tuple(key), [])
            uuids[tuple(key)].append(disk)

    def uuidSort(uuidDict):
        def uuidCmp(left, right):
            for x in range(2,-1,-1):
                ret = cmp(left[0][x], right[0][x])
                if ret != 0:
                    return ret
            return 0

        uuidItems = uuidDict.items()
        uuidItems.sort(uuidCmp)
        retList = []
        for k,v in uuidItems:
            if len(v) > 1:
                try:
                    retList.append(apply(MultiPath, v, {}))
                except SystemError, x:
                    if not x[0] in [2,]:
                        raise
        return retList

    mpList = uuidSort(uuids)
    names = reduce(lambda x,y: x + [y.name,], mpList, [])
    names.sort()
    def swap_names(left_name, right_name):
        left = None
        right = None
        for x in xrange(len(mpList)):
            if mpList[x].name == left_name:
                left = mpList[x]
            elif mpList[x].name == right_name:
                right = mpList[x]
        left.set_name(left_name + ".tmp")
        right.set_name(left_name)
        left.set_name(right_name)

    for x in xrange(len(names)):
        if mpList[x].name != names[x]:
            swap_names(mpList[x].name, names[x])

    return mpList

def getRaidSets(*disks):
    # make it so you don't have to apply() to pass a list
    old = disks
    disks = []
    for disk in old:
        if isinstance(disk, [].__class__) or isinstance(disk,().__class__):
            disks += list(disk)
        else:
            disks.append(disk)
        
    c = dmraid.context()
    rsList = []
    prefix = "/dev/mapper/"
    
    newdisks = []
    import os as _os
    for x in range(len(disks)):
        if not disks[x].startswith('/'):
            devdisk = '/dev/' + disks[x]
            tmpdisk = '/tmp/' + disks[x]

            if _os.access(devdisk, _os.F_OK):
                disks[x] = devdisk
            elif _os.access(tmpdisk, _os.F_OK):
                disks[x] = tmpdisk
    del _os
    disks = disks + newdisks

    for rs in apply(c.get_raidsets, disks, {}):
        set = RaidSet(rs, prefix=prefix)
        if set.valid:
            rsList.append(set)
    return rsList

__all__ = [ "dm", "dmraid", "BlockDev" ]
